// Generated by gencpp from file prueba_0/Arrow.msg
// DO NOT EDIT!


#ifndef PRUEBA_0_MESSAGE_ARROW_H
#define PRUEBA_0_MESSAGE_ARROW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prueba_0
{
template <class ContainerAllocator>
struct Arrow_
{
  typedef Arrow_<ContainerAllocator> Type;

  Arrow_()
    : arrow()  {
    }
  Arrow_(const ContainerAllocator& _alloc)
    : arrow(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arrow_type;
  _arrow_type arrow;





  typedef boost::shared_ptr< ::prueba_0::Arrow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prueba_0::Arrow_<ContainerAllocator> const> ConstPtr;

}; // struct Arrow_

typedef ::prueba_0::Arrow_<std::allocator<void> > Arrow;

typedef boost::shared_ptr< ::prueba_0::Arrow > ArrowPtr;
typedef boost::shared_ptr< ::prueba_0::Arrow const> ArrowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prueba_0::Arrow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prueba_0::Arrow_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prueba_0::Arrow_<ContainerAllocator1> & lhs, const ::prueba_0::Arrow_<ContainerAllocator2> & rhs)
{
  return lhs.arrow == rhs.arrow;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prueba_0::Arrow_<ContainerAllocator1> & lhs, const ::prueba_0::Arrow_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prueba_0

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prueba_0::Arrow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prueba_0::Arrow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prueba_0::Arrow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prueba_0::Arrow_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prueba_0::Arrow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prueba_0::Arrow_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prueba_0::Arrow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88a1badffe88bb4c1b4eb0ee47e6d7c1";
  }

  static const char* value(const ::prueba_0::Arrow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88a1badffe88bb4cULL;
  static const uint64_t static_value2 = 0x1b4eb0ee47e6d7c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::prueba_0::Arrow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prueba_0/Arrow";
  }

  static const char* value(const ::prueba_0::Arrow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prueba_0::Arrow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string arrow\n"
;
  }

  static const char* value(const ::prueba_0::Arrow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prueba_0::Arrow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arrow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Arrow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prueba_0::Arrow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prueba_0::Arrow_<ContainerAllocator>& v)
  {
    s << indent << "arrow: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arrow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRUEBA_0_MESSAGE_ARROW_H
